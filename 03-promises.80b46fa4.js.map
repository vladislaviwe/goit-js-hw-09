{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,wBAC/BI,aAAcL,SAASC,cAAc,iBAKvCH,EAAKC,KAAKO,iBAAiB,UAG3B,SAAsBC,G,kBAOhB,IAAMC,EAAWC,EACXC,EAAOZ,EAAKK,UAAUQ,MACtBC,GAAoBJ,EAAW,GAAKE,EAChCG,YAAW,WAa3B,IAAuBC,EAAUC,EACzBC,GADeF,EAZCN,EAYSO,EAZCE,EAa1BD,EAAgBE,KAAKC,SAAW,GAC7B,IAAIC,SAAQ,SAACC,EAASC,GAC3BT,YAAW,WACLG,EACFK,EAAQ,CAACP,WAAUC,UAEnBO,EAAO,CAACR,WAAUC,YAEnBA,OApBEQ,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MACjBU,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAfd,EAAS,QAAuCc,OAAjChB,EAAmBiB,OAAOd,GAAO,UAElGe,OAAM,SAAAN,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MAClBU,EAAA7B,GAAS8B,OAAOK,QAAQ,sBAAqCH,OAAfd,EAAS,QAAuCc,OAAjChB,EAAmBiB,OAAOd,GAAO,YAEjGH,IAjBLL,EAAIyB,iBAKN,IAHE,IAAM5B,EAASN,EAAKM,OAAOO,MACrBM,EAAQnB,EAAKI,WAAWS,MAEvBsB,EAAI,EAAGA,GAAK7B,EAAQ6B,GAAK,EAACC,EAAAD,GAcnC1B,EAAI4B,OAAOC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submitButton: document.querySelector('.form button'),\n};\n\nlet timeout = null;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(evt) {\n    evt.preventDefault();\n\n    const amount = refs.amount.value;\n    const delay = refs.firstDelay.value;\n\n  for (let i = 1; i <= amount; i += 1) {\n      const position = i;\n      const step = refs.delayStep.value;\n      const counterStepDelay = (position - 1) * step; \n      timeout = setTimeout(() => {\n          createPromise(position, delay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${counterStepDelay + Number(delay)}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${counterStepDelay + Number(delay)}ms`);\n          });\n      }, counterStepDelay);\n  };\n  evt.target.reset();\n};\n  \nfunction createPromise(position, delay, step) {\n  const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({position, delay});\n        } else {\n          reject({position, delay});\n        };\n      }, delay);\n    });\n};\n\n\n \n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","delayStep","amount","submitButton","addEventListener","evt","position1","i","step","value","counterStepDelay","setTimeout","position","delay","shouldResolve","delay1","Math","random","Promise","resolve","reject","then","param","$parcel$interopDefault","Notify","success","concat","Number","catch","failure","preventDefault","i1","_loop","target","reset"],"version":3,"file":"03-promises.80b46fa4.js.map"}