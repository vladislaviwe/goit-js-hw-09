{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,wBAC/BI,aAAcL,SAASC,cAAc,iBAGvC,IAAIK,EAAU,KA4Bd,SAASC,EAAcC,EAAUC,EAAOC,GACtC,MAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAACP,E,MAAUC,IAEnBO,EAAO,C,SAACR,E,MAAUC,MAEnBA,MAnCTX,EAAKC,KAAKmB,iBAAiB,UAG3B,SAAsBC,GAClBA,EAAIC,iBAEJ,MAAMhB,EAASN,EAAKM,OAAOiB,MACrBC,EAAQxB,EAAKI,WAAWmB,MAEhC,IAAK,IAAIE,EAAI,EAAGA,GAAKnB,EAAQmB,GAAK,EAAG,CACjC,MAAMC,EAAWD,EACXb,EAAOZ,EAAKK,UAAUkB,MACtBI,GAAoBD,EAAW,GAAKd,EAC1CJ,EAAUW,YAAW,KACjBV,EAAciB,EAAUF,GACvBI,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBrB,QAAiBiB,EAAkBK,OAAGrB,WAEpFsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA/B,GAASgC,OAAOI,QAAQ,sBAAoBxB,QAAeiB,EAAkBK,OAAGrB,aAEnFgB,GAEPN,EAAIc,OAAOC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submitButton: document.querySelector('.form button'),\n};\n\nlet timeout = null;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(evt) {\n    evt.preventDefault();\n\n    const amount = refs.amount.value;\n    const delay = refs.firstDelay.value;\n\n  for (let i = 1; i <= amount; i += 1) {\n      const position = i;\n      const step = refs.delayStep.value;\n      const counterStepDelay = (position - 1) * step; \n      timeout = setTimeout(() => {\n          createPromise(position, delay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${counterStepDelay + Number(delay)}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${counterStepDelay + Number(delay)}ms`);\n          });\n      }, counterStepDelay);\n  };\n  evt.target.reset();\n};\n  \nfunction createPromise(position, delay, step) {\n  const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({position, delay});\n        } else {\n          reject({position, delay});\n        };\n      }, delay);\n    });\n};\n\n\n \n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","firstDelay","delayStep","amount","submitButton","$47d4ff9957288465$var$timeout","$47d4ff9957288465$var$createPromise","position","delay","step","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","value","delay1","i","position1","counterStepDelay","then","$parcel$interopDefault","Notify","success","Number","catch","failure","target","reset"],"version":3,"file":"03-promises.f87434c7.js.map"}